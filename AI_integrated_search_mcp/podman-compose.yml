version: '3'

services:
  trend-analysis:
    build:
      context: ./app/trend-analysis
      dockerfile: Dockerfile
    container_name: ${TREND_ANALYSIS_CONTAINER}
    ports:
      - "${TREND_ANALYSIS_API_PORT}:5000"
    user: "root"
    environment:
      - DATABASE_API_URL=http://sqlite-db:5000
      - LOG_LEVEL=DEBUG
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}
      - MPLCONFIGDIR=/tmp/.matplotlib
    volumes:
      - type: tmpfs
        target: /tmp
        tmpfs:
          mode: 01777
    networks:
      - mcp-network
    restart: unless-stopped
    depends_on:
      sqlite-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  sqlite-db:
    build:
      context: ./db
      dockerfile: Dockerfile
    container_name: ${DATABASE_CONTAINER}
    ports:
      - "${DATABASE_API_PORT}:5000"
    volumes:
      - ./db/data:/app/data:Z
    user: "1000:1000"
    environment:
      - INPUT_DB_S3_PATH=${INPUT_DB_S3_PATH}
      - BIGQUERY_DB_S3_PATH=${BIGQUERY_DB_S3_PATH}
      - LOG_LEVEL=DEBUG
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  nl-query-service:
    build:
      context: ./app/nl-query
      dockerfile: Dockerfile
    container_name: ${NL_QUERY_CONTAINER}
    ports:
      - "${NL_QUERY_API_PORT}:5000"
    user: "1000:1000"
    environment:
      - DATABASE_API_URL=http://sqlite-db:5000
      - LOG_LEVEL=DEBUG
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - BEDROCK_LLM_MODEL=${BEDROCK_LLM_MODEL}
      - BEDROCK_EMBEDDING_MODEL=${BEDROCK_EMBEDDING_MODEL}
      - BEDROCK_RERANK_MODEL=${BEDROCK_RERANK_MODEL}
    networks:
      - mcp-network
    restart: unless-stopped
    depends_on:
      sqlite-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  web-ui:
    build:
      context: ./app/webui
      dockerfile: Dockerfile
    container_name: ${WEBUI_CONTAINER}
    ports:
      - "${WEBUI_PORT}:5000"
    user: "1000:1000"
    environment:
      - DATABASE_API_URL=http://sqlite-db:5000
      - NL_QUERY_API_URL=http://nl-query-service:5000
      - LANGCHAIN_QUERY_API_URL=http://langchain-query-service:5000
      - LOG_LEVEL=DEBUG
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
    networks:
      - mcp-network
    restart: unless-stopped
    depends_on:
      sqlite-db:
        condition: service_healthy
      nl-query-service:
        condition: service_healthy
        
  langchain-query-service:
    build:
      context: ./app/langchain-query
      dockerfile: Dockerfile
    container_name: ${LANGCHAIN_QUERY_CONTAINER}
    ports:
      - "${LANGCHAIN_QUERY_API_PORT}:5000"
    user: "1000:1000"
    volumes:
      - ./db/data:/app/data:Z
    environment:
      - DATABASE_API_URL=http://sqlite-db:5000
      - LOG_LEVEL=DEBUG
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - BEDROCK_LLM_MODEL=${BEDROCK_LLM_MODEL}
      - BEDROCK_EMBEDDING_MODEL=${BEDROCK_EMBEDDING_MODEL}
      - BEDROCK_RERANK_MODEL=${BEDROCK_RERANK_MODEL}
    networks:
      - mcp-network
    restart: unless-stopped
    depends_on:
      sqlite-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  mcp-network:
    driver: bridge
