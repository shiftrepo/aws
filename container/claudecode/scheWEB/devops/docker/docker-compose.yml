version: '3.8'

services:
  # Main Application Service
  app:
    build:
      context: ../..
      dockerfile: devops/docker/Dockerfile
    container_name: schedule-app
    ports:
      - "${APP_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3000
      - DATABASE_PATH=/app/data/schedule.db
      - BASIC_AUTH_ENABLED=${BASIC_AUTH_ENABLED:-true}
      - BASIC_AUTH_USERNAME=${BASIC_AUTH_USERNAME}
      - BASIC_AUTH_PASSWORD=${BASIC_AUTH_PASSWORD}
      - SESSION_SECRET=${SESSION_SECRET}
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED:-true}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-100}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-900000}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - BACKUP_ENABLED=${BACKUP_ENABLED:-true}
      - BACKUP_INTERVAL=${BACKUP_INTERVAL:-86400000}
    volumes:
      - app-data:/app/data
      - app-backups:/app/backups
      - app-logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - schedule-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Nginx Reverse Proxy (Optional - for SSL/TLS termination)
  nginx:
    image: nginx:alpine
    container_name: schedule-nginx
    ports:
      - "${HTTPS_PORT:-443}:443"
      - "${HTTP_PORT:-80}:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - app-logs:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - schedule-network
    profiles:
      - production
      - ssl

  # Backup Service (Automated backups)
  backup:
    build:
      context: ../..
      dockerfile: devops/docker/Dockerfile.backup
    container_name: schedule-backup
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - S3_BUCKET=${S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - app-data:/app/data:ro
      - app-backups:/app/backups
    restart: unless-stopped
    networks:
      - schedule-network
    profiles:
      - production
      - backup

  # Monitoring Service (Prometheus - Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: schedule-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    restart: unless-stopped
    networks:
      - schedule-network
    profiles:
      - monitoring

  # Grafana (Monitoring Dashboard - Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: schedule-grafana
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - schedule-network
    profiles:
      - monitoring

volumes:
  app-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}
  app-backups:
    driver: local
  app-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  schedule-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
