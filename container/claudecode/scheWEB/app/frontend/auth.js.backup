/**
 * 認証関連の機能
 */

class AuthManager {
    constructor() {
        this.apiBaseUrl = '/api';
        this.init();
    }

    init() {
        // ページ読み込み時に認証状態をチェック
        console.log('🔥 AuthManager 初期化');
        setTimeout(() => {
            this.checkAuthStatus();
        }, 100);
    }

    /**
     * 認証状態チェック
     */
    checkAuthStatus() {
        const token = localStorage.getItem('authToken');
        console.log('🔍 認証状態チェック:', token ? '有効' : '無効');

        if (token) {
            // トークンがある場合はダッシュボードを表示
            this.showDashboard();
        } else {
            // トークンがない場合はログイン画面を表示
            this.showLogin();
        }
    }

    /**
     * ログイン画面表示
     */
    showLogin() {
        // 簡単なログイン画面を動的に作成
        document.body.innerHTML = `
            <div class="auth-container">
                <div class="auth-card">
                    <h1>📅 チームスケジューラー</h1>
                    <form id="loginForm">
                        <div class="form-group">
                            <label for="username">ユーザーネーム:</label>
                            <input type="text" id="username" required>
                        </div>
                        <div class="form-group">
                            <label for="password">パスワード:</label>
                            <input type="password" id="password" required>
                        </div>
                        <button type="submit">ログイン</button>
                        <div id="loginError" class="error-message" style="display: none;"></div>
                    </form>
                    <div class="demo-info">
                        <p><strong>デモアカウント:</strong></p>
                        <p>• admin / admin123</p>
                        <p>• user1 / admin123</p>
                        <p>• user2 / admin123</p>
                    </div>
                </div>
            </div>
            <style>
                .auth-container {
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    min-height: 100vh;
                    background-color: #f5f5f5;
                    font-family: Arial, sans-serif;
                }
                .auth-card {
                    background: white;
                    padding: 2rem;
                    border-radius: 8px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                    width: 100%;
                    max-width: 400px;
                }
                .auth-card h1 {
                    text-align: center;
                    margin-bottom: 2rem;
                    color: #333;
                }
                .form-group {
                    margin-bottom: 1rem;
                }
                .form-group label {
                    display: block;
                    margin-bottom: 0.5rem;
                    color: #333;
                }
                .form-group input {
                    width: 100%;
                    padding: 0.75rem;
                    border: 1px solid #ddd;
                    border-radius: 4px;
                    box-sizing: border-box;
                }
                button[type="submit"] {
                    width: 100%;
                    padding: 0.75rem;
                    background-color: #007bff;
                    color: white;
                    border: none;
                    border-radius: 4px;
                    cursor: pointer;
                    font-size: 1rem;
                }
                button[type="submit"]:hover {
                    background-color: #0056b3;
                }
                .error-message {
                    color: #dc3545;
                    margin-top: 1rem;
                    text-align: center;
                }
                .demo-info {
                    margin-top: 2rem;
                    padding: 1rem;
                    background-color: #f8f9fa;
                    border-radius: 4px;
                    font-size: 0.9rem;
                }
                .demo-info p {
                    margin: 0.5rem 0;
                }
            </style>
        `;

        // ログインフォームのイベントリスナー
        document.getElementById('loginForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleLogin();
        });
    }

    /**
     * ダッシュボード表示
     */
    showDashboard() {
        console.log('🎯 ダッシュボード表示開始');

        // 元のHTMLコンテンツを復元
        document.body.innerHTML = `
            <div class="container">
                <header>
                    <h1>📅 チームスケジュール管理システム</h1>
                    <div class="controls">
                        <span class="current-user">ログイン済み</span>
                        <button id="gridViewBtn" class="active">グリッド表示</button>
                        <button id="listViewBtn">詳細リスト表示</button>
                        <button id="refreshBtn">更新</button>
                        <button id="logoutBtn" class="logout-btn">ログアウト</button>
                    </div>
                </header>

                <main>
                    <!-- グリッド表示 -->
                    <div id="gridView" class="view active">
                        <div class="grid-header">
                            <h2>30分間隔スケジュールグリッド (7:00-19:00)</h2>
                            <div class="legend">
                                <span class="legend-item"><span class="color available"></span>利用可能</span>
                                <span class="legend-item"><span class="color unavailable"></span>利用不可</span>
                                <span class="legend-item"><span class="color single-user"></span>1人のみ</span>
                                <span class="legend-item"><span class="color partial-meeting"></span>一部参加</span>
                                <span class="legend-item"><span class="color full-meeting"></span>全員参加</span>
                            </div>
                        </div>

                        <!-- 時間ヘッダー -->
                        <div class="time-header">
                            <div class="time-label">時間 (グリッド番号)</div>
                            <div class="grid-numbers"></div>
                        </div>

                        <!-- グリッド本体 -->
                        <div class="schedule-grid">
                            <div class="users-column">
                                <div class="user-header">ユーザー</div>
                                <div class="user-list"></div>
                            </div>
                            <div class="grid-content">
                                <div class="grid-cells"></div>
                            </div>
                        </div>
                    </div>

                    <!-- 詳細リスト表示 -->
                    <div id="listView" class="view">
                        <div class="list-header">
                            <h2>詳細スケジュールリスト</h2>
                            <div class="filters">
                                <select id="userFilter">
                                    <option value="">全てのユーザー</option>
                                </select>
                                <input type="time" id="timeFilter" placeholder="時間フィルター">
                            </div>
                        </div>
                        <div id="scheduleList" class="schedule-list"></div>
                    </div>

                    <!-- ローディング表示 -->
                    <div id="loading" class="loading">
                        <div class="spinner"></div>
                        <p>データを読み込んでいます...</p>
                    </div>

                    <!-- エラー表示 -->
                    <div id="error" class="error hidden">
                        <div class="error-content">
                            <h3>エラーが発生しました</h3>
                            <p id="errorMessage"></p>
                            <button id="retryBtn">再試行</button>
                        </div>
                    </div>
                </main>
            </div>
        `;

        console.log('✅ ダッシュボードHTML生成完了');

        // スケジュールマネージャーを初期化
        setTimeout(() => {
            console.log('🚀 ScheduleManager 初期化開始');
            if (typeof ScheduleManager !== 'undefined') {
                window.scheduleManager = new ScheduleManager();
                console.log('✅ ScheduleManager 初期化完了');
            } else {
                console.error('❌ ScheduleManager クラスが見つかりません');
            }

            // ログアウトボタンのイベント
            const logoutBtn = document.getElementById('logoutBtn');
            if (logoutBtn) {
                logoutBtn.addEventListener('click', () => {
                    console.log('🚪 ログアウト実行');
                    this.logout();
                });
            }
        }, 200);
    }

    /**
     * ログイン処理
     */
    async handleLogin() {
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;
        const errorElement = document.getElementById('loginError');

        try {
            const response = await fetch(`${this.apiBaseUrl}/login`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ username, password })
            });

            if (response.ok) {
                const data = await response.json();
                localStorage.setItem('authToken', data.access_token);
                localStorage.setItem('currentUser', JSON.stringify(data.user));

                console.log('✅ ログイン成功:', data.user);
                this.showDashboard();
            } else {
                const error = await response.json();
                errorElement.textContent = error.error || 'ログインに失敗しました';
                errorElement.style.display = 'block';
            }
        } catch (error) {
            console.error('❌ ログインエラー:', error);
            errorElement.textContent = 'ログインに失敗しました';
            errorElement.style.display = 'block';
        }
    }

    /**
     * ログアウト処理
     */
    logout() {
        localStorage.removeItem('authToken');
        localStorage.removeItem('currentUser');
        this.showLogin();
    }
}

// 認証マネージャーを初期化
document.addEventListener('DOMContentLoaded', () => {
    window.authManager = new AuthManager();
});