AWSTemplateFormatVersion: "2010-09-09"
Description: >
  CloudFormation Template to launch an EC2 instance with Docker and Python 3.12 in a container, with pip libraries installed.
  Ports 7474 and 7687 and 7575 and 7587 are open for external access for the original instance.
  Adds a new SHIFTDify EC2 instance with a separate security group for port 80.
  Resources are suffixed with SHIFT-graphRAG.

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select an existing EC2 KeyPair for SSH access (optional)
    Default: "SHIFT-main"

  AccessKeyIdParam:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Access Key ID from Parameter Store
    Default: "/adminOpe/accessKey/aws_access_key_id" # Parameter Store „ÅÆ„Éë„É©„É°„Éº„ÇøÂêç

  SecretAccessKeyParam:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Secret Access Key from Parameter Store
    Default: "/adminOpe/accessKey/aws_secret_access_key" # Parameter Store „ÅÆ„Éë„É©„É°„Éº„ÇøÂêç

  RegionNameParam:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Secret Access Key from Parameter Store
    Default: "/adminOpe/accessKey/aws_region_name" # Parameter Store „ÅÆ„Éë„É©„É°„Éº„ÇøÂêç

  GithubPrivateKey:
    Type: AWS::SSM::Parameter::Value<String> # üëà  AWS::SSM::Parameter::Value<String> „ÇíÊåáÂÆö
    Description: GitHub private key from Parameter Store
    Default: "/adminOpe/github/privateKey" # üëà Parameter Store „ÅÆ„Éë„É©„É°„Éº„ÇøÂêç (SecureString)

  GithubPublicKey:
    Type: AWS::SSM::Parameter::Value<String> # üëà  AWS::SSM::Parameter::Value<String> „ÇíÊåáÂÆö
    Description: GitHub public key from Parameter Store
    Default: "/adminOpe/github/publicKey" # üëà Parameter Store „ÅÆ„Éë„É©„É°„Éº„ÇøÂêç (SecureString)

  GithubShiftrepoPatParam:
    Type: AWS::SSM::Parameter::Value<String>
    Description: GitHub repository PAT from Parameter Store
    Default: "/developOpe/mcp/GITHUB_SHIFTREPO_PAT" # üëà Parameter Store „ÅÆ„Éë„É©„É°„Éº„ÇøÂêç (SecureString)


  InstanceType:
    Type: String
    Description: Select the instance type (t3 series only)
    Default: t3.medium
    # 2023/10/02 ËøΩË®ò: t3„Ç∑„É™„Éº„Ç∫„ÅÆ„Ç§„É≥„Çπ„Çø„É≥„Çπ„Çø„Ç§„Éó„ÇíÈÅ∏ÊäûËÇ¢„Å®„Åó„Å¶ËøΩÂä†
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge

  InstanceType4Localllm:
    Type: String
    Description: Select the instance type (g4dn or p2 for local llm) p2 0.9$/1h g4dn 0.526$/1h
    Default: g4dn.xlarge
    AllowedValues:
      - t3.small
      - g4dn.xlarge
      - p2.xlarge
      - t3.medium
      - t3.large
      - t3.xlarge

  AmazonLinuxAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64

  CreateMCPServer:
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
    Description: "MCP„Çµ„Éº„ÉêÁî®EC2„Çí‰ΩúÊàê„Åó„Åæ„Åô„ÅãÔºü"

  CreateDifyServer:
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
    Description: "Dify„Çµ„Éº„ÉêÁî®EC2„Çí‰ΩúÊàê„Åó„Åæ„Åô„ÅãÔºü"

  CreateGemmaServer:
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
    Description: "Gemma„Çµ„Éº„ÉêÁî®EC2„Çí‰ΩúÊàê„Åó„Åæ„Åô„ÅãÔºü"

  HostedZoneName:
    Type: String
    Default: "shift-terminus.com"
    Description: The Route 53 hosted zone name (e.g. shift.com)

#  EnableOriginalInstance:
#    Type: String
#    AllowedValues: ["true", "false"]
#    Default: "true"
#    Description: Whether to create the original EC2 instance

#  EnableSHIFTDifyInstance:
#    Type: String
#    AllowedValues: ["true", "false"]
#    Default: "false"
#    Description: Whether to create the SHIFTDify EC2 instance

#  EnableSHIFTGemmaInstance:
#    Type: String
#    AllowedValues: ["true", "false"]
#    Default: "false"
#    Description: Whether to create the SHIFTGemma EC2 instance

Conditions:
  UseKeyPairParameter: !Not [!Equals [!Ref KeyName, ""]]
  CreateMCPServerCondition: !Equals [!Ref CreateMCPServer, "true"]
  CreateDifyServerCondition: !Equals [!Ref CreateDifyServer, "true"]
  CreateGemmaServerCondition: !Equals [!Ref CreateGemmaServer, "true"]
  CreateOriginalInstance: !Equals [ !Ref CreateMCPServer, "true" ]
#  CreateOriginalInstance: !Equals [ !Ref EnableOriginalInstance, "true" ]
  CreateSHIFTDifyInstance: !Equals [ !Ref CreateDifyServer, "true" ]
  CreateSHIFTGemmaInstance: !Equals [ !Ref CreateGemmaServer, "true" ]

Resources:
  # VPC
  VPCSHIFTgraphRAG:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC-SHIFT-graphRAG

  # Internet Gateway
  InternetGatewaySHIFTgraphRAG:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IGW-SHIFT-graphRAG

  AttachGatewaySHIFTgraphRAG:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPCSHIFTgraphRAG
      InternetGatewayId: !Ref InternetGatewaySHIFTgraphRAG

  # Public Subnet
  PublicSubnetSHIFTgraphRAG:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCSHIFTgraphRAG
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: PublicSubnet-SHIFT-graphRAG

  # Private Subnet
  PrivateSubnetSHIFTgraphRAG:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCSHIFTgraphRAG
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: PrivateSubnet-SHIFT-graphRAG

  # Route Table for Public Subnet
  PublicRouteTableSHIFTgraphRAG:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCSHIFTgraphRAG
      Tags:
        - Key: Name
          Value: PublicRT-SHIFT-graphRAG

  PublicRouteSHIFTgraphRAG:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTableSHIFTgraphRAG
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewaySHIFTgraphRAG

  PublicSubnetRouteTableAssociationSHIFTgraphRAG:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetSHIFTgraphRAG
      RouteTableId: !Ref PublicRouteTableSHIFTgraphRAG

  # Original Security Group
  EC2SecurityGroupSHIFTgraphRAG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: EC2SG-SHIFT-graphRAG
      GroupDescription: Allow SSH, Neo4j ports (7474, 7687, 7575, 7587), and other application ports
      VpcId: !Ref VPCSHIFTgraphRAG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 7474
          ToPort: 7474
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 7687
          ToPort: 7687
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 7575
          ToPort: 7575
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 7587
          ToPort: 7587
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8501
          ToPort: 8501
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8082
          ToPort: 8082
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8083
          ToPort: 8083
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5001
          ToPort: 5001
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5002
          ToPort: 5002
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5003
          ToPort: 5003
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5004
          ToPort: 5004
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5005
          ToPort: 5005
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5006
          ToPort: 5006
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: EC2SG-SHIFT-graphRAG

  # ----- Start of new resources for SHIFTDify -----
  # New Security Group for SHIFTDify (Port 80 only)
  SHIFTGemmaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateGemmaServerCondition
    Properties:
      GroupDescription: Security group for SHIFTDify EC2 instance allowing HTTP (port 80) inbound traffic.
      VpcId: !Ref VPCSHIFTgraphRAG # Êó¢Â≠ò„ÅÆVPC„Çí‰ΩøÁî®
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0 # „Å©„Åì„Åã„Çâ„Åß„ÇÇ80Áï™„Éù„Éº„Éà„ÇíË®±ÂèØ
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0 # „Å©„Åì„Åã„Çâ„Åß„ÇÇ80Áï™„Éù„Éº„Éà„ÇíË®±ÂèØ
        - IpProtocol: tcp
          FromPort: 11434
          ToPort: 11434
          CidrIp: 0.0.0.0/0 # „Å©„Åì„Åã„Çâ„Åß„ÇÇ80Áï™„Éù„Éº„Éà„ÇíË®±ÂèØ
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SHIFTGemma-SG # Êñ∞„Åó„ÅÑ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Ç∞„É´„Éº„Éó„ÅÆÂêçÂâç„Çø„Ç∞

  # New Security Group for SHIFTDify (Port 80 only)
  SHIFTDifySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateDifyServerCondition
    Properties:
      GroupDescription: Security group for SHIFTDify EC2 instance allowing HTTP (port 80) inbound traffic.
      VpcId: !Ref VPCSHIFTgraphRAG # Êó¢Â≠ò„ÅÆVPC„Çí‰ΩøÁî®
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8081
          ToPort: 8081
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 30080
          ToPort: 30080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 30443
          ToPort: 30443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 # „Å©„Åì„Åã„Çâ„Åß„ÇÇ80Áï™„Éù„Éº„Éà„ÇíË®±ÂèØ
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SHIFTDify-SG # Êñ∞„Åó„ÅÑ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Ç∞„É´„Éº„Éó„ÅÆÂêçÂâç„Çø„Ç∞

# Route 53 Hosted Zone
  ShiftComHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Sub "${HostedZoneName}." # HostedZoneName„Éë„É©„É°„Éº„Çø„Çí‰ΩøÁî®
      HostedZoneConfig:
        Comment: Hosted zone for ${HostedZoneName}
      Tags:
        - Key: Name
          Value: !Sub "${HostedZoneName}-zone"

  N8nRecordSet:
    Type: AWS::Route53::RecordSet
    Condition: CreateDifyServerCondition # „Åì„ÅÆÊù°‰ª∂„ÇíËøΩÂä†
    DependsOn: SHIFTDifyInstance # SHIFTDifyInstance„Åå‰ΩúÊàê„Åï„Çå„ÅüÂæå„Å´„Åì„ÅÆ„É¨„Ç≥„Éº„Éâ„Çª„ÉÉ„Éà„Çí‰ΩúÊàê
    Properties:
      HostedZoneId: !Ref ShiftComHostedZone # „Åì„Åì„Çí‰øÆÊ≠£
      Name: !Sub "n8n.${HostedZoneName}"
      Type: A
      TTL: 300
      ResourceRecords:
        !If # ResourceRecords„ÇíÊù°‰ª∂‰ªò„Åç„ÅßË®≠ÂÆö„Åô„Çã„Åü„ÇÅ„Å´!If„Çí‰ΩøÁî®
          - CreateDifyServerCondition # Dify„Çµ„Éº„Éê„Éº„Åå‰ΩúÊàê„Åï„Çå„ÇãÂ†¥Âêà„Å´„ÅÆ„Åø„Ç§„É≥„Éù„Éº„Éà„ÇíË©¶„Åø„Çã
          - - !GetAtt SHIFTDifyInstance.PublicIp # Â±ûÊÄß„ÇíÁõ¥Êé•ÂèÇÁÖß
          - - "127.0.0.1" # Dify„Çµ„Éº„Éê„Éº„Åå‰ΩúÊàê„Åï„Çå„Å™„ÅÑÂ†¥Âêà„ÅÆ„Éó„É¨„Éº„Çπ„Éõ„É´„ÉÄ„Éº„Åæ„Åü„ÅØÂÆâÂÖ®„Å™„Éá„Éï„Ç©„É´„Éà

  DifyRecordSet:
    Type: AWS::Route53::RecordSet
    Condition: CreateDifyServerCondition # „Åì„ÅÆÊù°‰ª∂„ÇíËøΩÂä†
    DependsOn: SHIFTDifyInstance # SHIFTDifyInstance„Åå‰ΩúÊàê„Åï„Çå„ÅüÂæå„Å´„Åì„ÅÆ„É¨„Ç≥„Éº„Éâ„Çª„ÉÉ„Éà„Çí‰ΩúÊàê
    Properties:
      HostedZoneId: !Ref ShiftComHostedZone # „Åì„Åì„Çí‰øÆÊ≠£
      Name: !Sub "dify.${HostedZoneName}"
      Type: A
      TTL: 300
      ResourceRecords:
        !If # ResourceRecords„ÇíÊù°‰ª∂‰ªò„Åç„ÅßË®≠ÂÆö„Åô„Çã„Åü„ÇÅ„Å´!If„Çí‰ΩøÁî®
          - CreateDifyServerCondition # Dify„Çµ„Éº„Éê„Éº„Åå‰ΩúÊàê„Åï„Çå„ÇãÂ†¥Âêà„Å´„ÅÆ„Åø„Ç§„É≥„Éù„Éº„Éà„ÇíË©¶„Åø„Çã
          - - !GetAtt SHIFTDifyInstance.PublicIp # Â±ûÊÄß„ÇíÁõ¥Êé•ÂèÇÁÖß
          - - "127.0.0.1" # Dify„Çµ„Éº„Éê„Éº„Åå‰ΩúÊàê„Åï„Çå„Å™„ÅÑÂ†¥Âêà„ÅÆ„Éó„É¨„Éº„Çπ„Éõ„É´„ÉÄ„Éº„Åæ„Åü„ÅØÂÆâÂÖ®„Å™„Éá„Éï„Ç©„É´„Éà

  TraeficRecordSet:
    Type: AWS::Route53::RecordSet
    Condition: CreateDifyServerCondition # „Åì„ÅÆÊù°‰ª∂„ÇíËøΩÂä†
    DependsOn: SHIFTDifyInstance # SHIFTDifyInstance„Åå‰ΩúÊàê„Åï„Çå„ÅüÂæå„Å´„Åì„ÅÆ„É¨„Ç≥„Éº„Éâ„Çª„ÉÉ„Éà„Çí‰ΩúÊàê
    Properties:
      HostedZoneId: !Ref ShiftComHostedZone # „Åì„Åì„Çí‰øÆÊ≠£
      Name: !Sub "traefic.${HostedZoneName}"
      Type: A
      TTL: 300
      ResourceRecords:
        !If # ResourceRecords„ÇíÊù°‰ª∂‰ªò„Åç„ÅßË®≠ÂÆö„Åô„Çã„Åü„ÇÅ„Å´!If„Çí‰ΩøÁî®
          - CreateDifyServerCondition # Dify„Çµ„Éº„Éê„Éº„Åå‰ΩúÊàê„Åï„Çå„ÇãÂ†¥Âêà„Å´„ÅÆ„Åø„Ç§„É≥„Éù„Éº„Éà„ÇíË©¶„Åø„Çã
          - - !GetAtt SHIFTDifyInstance.PublicIp # Â±ûÊÄß„ÇíÁõ¥Êé•ÂèÇÁÖß
          - - "127.0.0.1" # Dify„Çµ„Éº„Éê„Éº„Åå‰ΩúÊàê„Åï„Çå„Å™„ÅÑÂ†¥Âêà„ÅÆ„Éó„É¨„Éº„Çπ„Éõ„É´„ÉÄ„Éº„Åæ„Åü„ÅØÂÆâÂÖ®„Å™„Éá„Éï„Ç©„É´„Éà

  MCPRecordSet:
    Type: AWS::Route53::RecordSet
    Condition: CreateMCPServerCondition # „Åì„ÅÆÊù°‰ª∂„ÇíËøΩÂä†
    DependsOn: EC2InstanceSHIFTgraphRAG # SHIFTDifyInstance„Åå‰ΩúÊàê„Åï„Çå„ÅüÂæå„Å´„Åì„ÅÆ„É¨„Ç≥„Éº„Éâ„Çª„ÉÉ„Éà„Çí‰ΩúÊàê
    Properties:
      HostedZoneId: !Ref ShiftComHostedZone # „Åì„Åì„Çí‰øÆÊ≠£
      Name: !Sub "mcp.${HostedZoneName}"
      Type: A
      TTL: 300
      ResourceRecords:
        !If # ResourceRecords„ÇíÊù°‰ª∂‰ªò„Åç„ÅßË®≠ÂÆö„Åô„Çã„Åü„ÇÅ„Å´!If„Çí‰ΩøÁî®
          - CreateMCPServerCondition # Dify„Çµ„Éº„Éê„Éº„Åå‰ΩúÊàê„Åï„Çå„ÇãÂ†¥Âêà„Å´„ÅÆ„Åø„Ç§„É≥„Éù„Éº„Éà„ÇíË©¶„Åø„Çã
          - - !GetAtt EC2InstanceSHIFTgraphRAG.PublicIp # Â±ûÊÄß„ÇíÁõ¥Êé•ÂèÇÁÖß
          - - "127.0.0.1" # Dify„Çµ„Éº„Éê„Éº„Åå‰ΩúÊàê„Åï„Çå„Å™„ÅÑÂ†¥Âêà„ÅÆ„Éó„É¨„Éº„Çπ„Éõ„É´„ÉÄ„Éº„Åæ„Åü„ÅØÂÆâÂÖ®„Å™„Éá„Éï„Ç©„É´„Éà

  # SHIFTDify EC2 Instance
  SHIFTDifyInstance:
    Type: AWS::EC2::Instance
    Condition: CreateDifyServerCondition
    Properties:
      # Êó¢Â≠ò„ÅÆEC2„Å®Âêå„ÅòAMI ID„ÄÅ„Ç§„É≥„Çπ„Çø„É≥„Çπ„Çø„Ç§„Éó„ÄÅKeyName„ÄÅIAM„Éó„É≠„Éï„Ç°„Ç§„É´„Çí‰ΩøÁî®
      ImageId: !Ref AmazonLinuxAMI
      InstanceType: !Ref InstanceType # „Éë„É©„É°„Éº„Çø„Åã„ÇâÂèñÂæó
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
            - !Ref SHIFTDifySecurityGroup
          SubnetId: !Ref PublicSubnetSHIFTgraphRAG
      #SubnetId: !Ref PublicSubnetSHIFTgraphRAG # Êó¢Â≠ò„ÅÆ„Éë„Éñ„É™„ÉÉ„ÇØ„Çµ„Éñ„Éç„ÉÉ„Éà„Å´ÈÖçÁΩÆ
      # Êñ∞„Åó„Åè‰ΩúÊàê„Åó„ÅüSHIFTDifySecurityGroup„ÅÆ„Åø„ÇíÈñ¢ÈÄ£‰ªò„Åë
      #SecurityGroupIds:
      #  - !Ref SHIFTDifySecurityGroup # Êñ∞„Åó„ÅÑ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Ç∞„É´„Éº„Éó„ÇíÂèÇÁÖß
      IamInstanceProfile: !Ref EC2InstanceProfileSHIFTgraphRAG # Êó¢Â≠ò„ÅÆIAM„Éó„É≠„Éï„Ç°„Ç§„É´„Çí‰ΩøÁî®
      KeyName: !If [UseKeyPairParameter, !Ref KeyName, !Ref "AWS::NoValue"] # „Éë„É©„É°„Éº„Çø„Åã„ÇâÂèñÂæó„ÄÅConditional„ÇÇÁ∂ôÊâø
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
            VolumeType: gp2
            DeleteOnTermination: true
      Tags: # ÊåáÂÆö„Åï„Çå„ÅüÂêçÂâç„Å®author„Çø„Ç∞„ÇíË®≠ÂÆö
        - Key: Name
          Value: SHIFTDify # EC2„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÅÆÂêçÂâç„Çø„Ç∞
        - Key: author
          Value: kentaro.mitsui # ÊåáÂÆö„Åï„Çå„Åüauthor„Çø„Ç∞
      UserData: # CloudWatch Agent„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´ÈÉ®ÂàÜ„ÅÆ„Åø„ÇíÁ∂ôÊâø („Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥Âõ∫ÊúâÈÉ®ÂàÜ„ÅØÈô§Â§ñ)
        Fn::Base64: !Sub |
          #!/bin/bash
          set -x
          # AWS CloudWatch Agent„ÅÆRPM„Éë„ÉÉ„Ç±„Éº„Ç∏„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Å¶„Ç§„É≥„Çπ„Éà„Éº„É´
          curl -O https://s3.amazonaws.com/amazoncloudwatch-agent/redhat/amd64/latest/amazon-cloudwatch-agent.rpm
          dnf install -y ./amazon-cloudwatch-agent.rpm

          # CloudWatch Agent„ÅÆË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇíÈÖçÁΩÆ (ÂÖÉ„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà„Åã„Çâ„É≠„Ç∞Ë®≠ÂÆö„Çí„Ç≥„Éî„Éº)
          cat <<EOF > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          {
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "SHIFT-graphRAG-EC2-Messages", # ÂÖÉ„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅÆ„É≠„Ç∞„Ç∞„É´„Éº„ÉóÂêç„Çí‰ΩøÁî®
                      "log_stream_name": "{instance_id}-messages"
                    }
                    # ÂÖÉ„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅÆdocker.logË®≠ÂÆö„ÅØ„Åì„Åì„Åß„ÅØÂê´„ÇÅ„Å™„ÅÑ
                  ]
                }
              }
            }
          }
          EOF

          # CloudWatch Agent„ÅÆËµ∑Âãï„Å®Ëá™ÂãïËµ∑Âãï„ÅÆÊúâÂäπÂåñ
          systemctl enable amazon-cloudwatch-agent
          systemctl start amazon-cloudwatch-agent

          # SSM Agent„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´ (RHEL/CentOS 8+„Åß„ÅØÊ®ôÊ∫ñ„ÅßÂÖ•„Å£„Å¶„ÅÑ„Çã„Åì„Å®„ÅåÂ§ö„ÅÑ„Åå„ÄÅÂøµ„ÅÆ„Åü„ÇÅ„Ç§„É≥„Çπ„Éà„Éº„É´„Ç≥„Éû„É≥„Éâ„ÇíÊÆã„Åó„Å¶„Åä„Åè)
          #dnf install -y amazon-ssm-agent
          #systemctl enable amazon-ssm-agent
          #systemctl start amazon-ssm-agent

          max_attempts=5
          attempt_num=1
          success=false
          while [ $success = false ] && [ $attempt_num -le $max_attempts ]; do
            sudo dnf install -y git docker
            if [ $? -eq 0 ]; then
              echo "dnf install succeeded"
              success=true
            else
              echo "dnf install $attempt_num failed. trying again..."
              sleep 3
              ((attempt_num++))
            fi
          done
          sudo systemctl start docker
          sudo gpasswd -a ec2-user docker
          sudo gpasswd -a ssm-user docker
          sudo chgrp docker /var/run/docker.sock
          sudo service docker restart
          sudo systemctl enable docker
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.28.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

          mkdir -p /root/.ssh
          echo "${GithubPrivateKey}" > /root/.ssh/id_ed25519
          chmod 400 /root/.ssh/id_ed25519

          cat <<EOF > /root/.ssh/config
          Host github.com
            IdentityFile ~/.ssh/id_ed25519
            User git
          Host github.com
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
          EOF

          git clone git@github.com:shiftrepo/aws.git /root/aws.git

          cp -pR /root/aws.git/container/n8n/ /opt/.

          cd /opt
          sudo git clone https://github.com/langgenius/dify.git
          #cd /opt/dify
          #sudo git checkout 1.1.3
          #sudo git pull origin 1.1.3
          cd /opt/dify/docker
          sudo cp .env.example .env

  # ----- End of new resources for SHIFTDify -----

  # SHIFTGemma EC2 Instance
  SHIFTGemmaInstance:
    Type: AWS::EC2::Instance
    Condition: CreateGemmaServerCondition
    Properties:
      # Deep Learning Base OSS Nvidia Driver GPU AMI (Ubuntu 22.04)
      ImageId: ami-01924b6996b062ee3
      InstanceType: !Ref InstanceType4Localllm
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
            - !Ref SHIFTGemmaSecurityGroup
          SubnetId: !Ref PublicSubnetSHIFTgraphRAG
      IamInstanceProfile: !Ref EC2InstanceProfileSHIFTgraphRAG # Êó¢Â≠ò„ÅÆIAM„Éó„É≠„Éï„Ç°„Ç§„É´„Çí‰ΩøÁî®
      KeyName: !If [UseKeyPairParameter, !Ref KeyName, !Ref "AWS::NoValue"] # „Éë„É©„É°„Éº„Çø„Åã„ÇâÂèñÂæó„ÄÅConditional„ÇÇÁ∂ôÊâø
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 120 # „Éá„Ç£„Çπ„ÇØ„Çµ„Ç§„Ç∫ (GB)
            VolumeType: gp3 # „Éú„É™„É•„Éº„É†„Çø„Ç§„Éó (Êé®Â•®: gp3)
            DeleteOnTermination: true
      Tags: # ÊåáÂÆö„Åï„Çå„ÅüÂêçÂâç„Å®author„Çø„Ç∞„ÇíË®≠ÂÆö
        - Key: Name
          Value: SHIFTGemma # EC2„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÅÆÂêçÂâç„Çø„Ç∞
        - Key: author
          Value: kentaro.mitsui # ÊåáÂÆö„Åï„Çå„Åüauthor„Çø„Ç∞
      UserData: # CloudWatch Agent„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´ÈÉ®ÂàÜ„ÅÆ„Åø„ÇíÁ∂ôÊâø („Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥Âõ∫ÊúâÈÉ®ÂàÜ„ÅØÈô§Â§ñ)
        Fn::Base64: !Sub |
          #!/bin/bash
          set -x
          # AWS CloudWatch Agent„ÅÆRPM„Éë„ÉÉ„Ç±„Éº„Ç∏„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Å¶„Ç§„É≥„Çπ„Éà„Éº„É´
          curl -O https://s3.amazonaws.com/amazoncloudwatch-agent/redhat/amd64/latest/amazon-cloudwatch-agent.rpm
          dnf install -y ./amazon-cloudwatch-agent.rpm

          # CloudWatch Agent„ÅÆË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇíÈÖçÁΩÆ (ÂÖÉ„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà„Åã„Çâ„É≠„Ç∞Ë®≠ÂÆö„Çí„Ç≥„Éî„Éº)
          cat <<EOF > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          {
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "SHIFT-graphRAG-EC2-Messages", # ÂÖÉ„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅÆ„É≠„Ç∞„Ç∞„É´„Éº„ÉóÂêç„Çí‰ΩøÁî®
                      "log_stream_name": "{instance_id}-messages"
                    }
                    # ÂÖÉ„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅÆdocker.logË®≠ÂÆö„ÅØ„Åì„Åì„Åß„ÅØÂê´„ÇÅ„Å™„ÅÑ
                  ]
                }
              }
            }
          }
          EOF

          # CloudWatch Agent„ÅÆËµ∑Âãï„Å®Ëá™ÂãïËµ∑Âãï„ÅÆÊúâÂäπÂåñ
          systemctl enable amazon-cloudwatch-agent
          systemctl start amazon-cloudwatch-agent

          # SSM Agent„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´ (RHEL/CentOS 8+„Åß„ÅØÊ®ôÊ∫ñ„ÅßÂÖ•„Å£„Å¶„ÅÑ„Çã„Åì„Å®„ÅåÂ§ö„ÅÑ„Åå„ÄÅÂøµ„ÅÆ„Åü„ÇÅ„Ç§„É≥„Çπ„Éà„Éº„É´„Ç≥„Éû„É≥„Éâ„ÇíÊÆã„Åó„Å¶„Åä„Åè)
          dnf install -y amazon-ssm-agent
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent

          max_attempts=5
          attempt_num=1
          success=false
          while [ $success = false ] && [ $attempt_num -le $max_attempts ]; do
            sudo dnf install -y git docker
            if [ $? -eq 0 ]; then
              echo "dnf install succeeded"
              success=true
            else
              echo "dnf install $attempt_num failed. trying again..."
              sleep 3
              ((attempt_num++))
            fi
          done
          sudo systemctl start docker
          sudo gpasswd -a ec2-user docker
          sudo gpasswd -a ssm-user docker
          sudo chgrp docker /var/run/docker.sock
          sudo service docker restart
          sudo systemctl enable docker
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.28.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

          mkdir -p /root/.ssh
          echo "${GithubPrivateKey}" > /root/.ssh/id_ed25519
          chmod 400 /root/.ssh/id_ed25519

          cat <<EOF > /root/.ssh/config
          Host github.com
            IdentityFile ~/.ssh/id_ed25519
            User git
          Host github.com
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
          EOF

          cp -pR /root/.ssh/config /home/ec2-user/.ssh/.
          cp -pR /root/.ssh/id_ed25519 /home/ec2-user/.ssh/.
          chown -R ec2-user:ec2-user /home/ec2-user/.ssh/

          git clone git@github.com:shiftrepo/aws.git /root/aws.git
          git config --global --add safe.directory /root/aws.git


  # ----- End of new resources for SHIFTDify -----

  # IAM Role for EC2 (Original - Reused by the new instance)
  EC2InstanceRoleSHIFTgraphRAG:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore # SSM Managed Instance Core„Éù„É™„Ç∑„Éº
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy # CloudWatch Agent„Éù„É™„Ç∑„Éº
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
      Policies: # „Ç§„É≥„É©„Ç§„É≥„Éù„É™„Ç∑„Éº - Parameter Store„Å∏„ÅÆ„Ç¢„ÇØ„Çª„ÇπË®±ÂèØ (ÂÖÉ„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà„Åã„Çâ„Ç≥„Éî„Éº)
        - PolicyName: ParameterStoreAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${AccessKeyIdParam}" # Parameter Store „Éë„É©„É°„Éº„Çø„ÅÆ ARN „ÇíÂèÇÁÖß
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${SecretAccessKeyParam}"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${RegionNameParam}"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${GithubPrivateKey}" # Êó¢Â≠ò„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÅØGithub„Ç≠„Éº„Çí‰ΩøÁî®„Åô„Çã„Åå„ÄÅÊñ∞„Åó„ÅÑ„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÅÆUserData„Å´„ÅØÂê´„ÇÅ„Å™„ÅÑ„Åü„ÇÅ„ÄÅ„Åì„ÅÆË®±ÂèØ„ÅØÊñ∞„Åó„ÅÑ„Ç§„É≥„Çπ„Çø„É≥„Çπ„Å´„Å®„Å£„Å¶„ÅØ‰∏çË¶Å„Åã„ÇÇ„Åó„Çå„Å™„ÅÑ„ÅåÁÑ°ÂÆ≥
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${GithubPublicKey}"

  # IAM Instance Profile (Original - Reused by the new instance)
  EC2InstanceProfileSHIFTgraphRAG:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRoleSHIFTgraphRAG

  # Original EC2 Instance (kept as is)
  EC2InstanceSHIFTgraphRAG:
    Type: AWS::EC2::Instance
    Condition: CreateMCPServerCondition
    Properties:
      ImageId: ami-0c7af5fe939f2677f  # Red Hat Enterprise Linux 8 (us-east-1)
      InstanceType: !Ref InstanceType
      SubnetId: !Ref PublicSubnetSHIFTgraphRAG
      SecurityGroupIds:
        - !Ref EC2SecurityGroupSHIFTgraphRAG # ÂÖÉ„ÅÆ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Ç∞„É´„Éº„Éó„Çí‰ΩøÁî®
      IamInstanceProfile: !Ref EC2InstanceProfileSHIFTgraphRAG
      KeyName: !If [UseKeyPairParameter, !Ref KeyName, !Ref "AWS::NoValue"]
      BlockDeviceMappings:
        - DeviceName: /dev/sda1  # „É´„Éº„Éà„Éá„Éê„Ç§„Çπ
          Ebs:
            VolumeSize: 100     # ‚úÖ „Éá„Ç£„Çπ„ÇØ„Çµ„Ç§„Ç∫ (GB)
            VolumeType: gp3     # „Éú„É™„É•„Éº„É†„Çø„Ç§„Éó (Êé®Â•®: gp3)
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: EC2Instance-SHIFT-graphRAG
      UserData: # Original UserData (kept as is)
        Fn::Base64: !Sub |
          #!/bin/bash
          set -x
          # 1. AWS CloudWatch Agent„ÅÆRPM„Éë„ÉÉ„Ç±„Éº„Ç∏„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
          curl -O https://s3.amazonaws.com/amazoncloudwatch-agent/redhat/amd64/latest/amazon-cloudwatch-agent.rpm

          # 2. RPM„Éë„ÉÉ„Ç±„Éº„Ç∏„Çí„Ç§„É≥„Çπ„Éà„Éº„É´
          dnf install -y ./amazon-cloudwatch-agent.rpm

          # 3. „É≠„Ç∞ËøΩÂä†
          cat <<EOF > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          {
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "SHIFT-graphRAG-EC2-Messages",
                      "log_stream_name": "{instance_id}-messages"
                    },
                    {
                      "file_path": "/var/log/docker.log",
                      "log_group_name": "SHIFT-graphRAG-EC2-Docker",
                      "log_stream_name": "{instance_id}-docker"
                    }
                  ]
                }
              }
            }
          }
          EOF

          # 4. CloudWatch Agent„ÅÆËµ∑Âãï„Å®Ëá™ÂãïËµ∑Âãï„ÅÆÊúâÂäπÂåñ
          systemctl enable amazon-cloudwatch-agent
          systemctl start amazon-cloudwatch-agent

          # SSM Agent„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´ (RHEL/CentOS 8+„Åß„ÅØÊ®ôÊ∫ñ„ÅßÂÖ•„Å£„Å¶„ÅÑ„Çã„Åì„Å®„ÅåÂ§ö„ÅÑ„Åå„ÄÅÂøµ„ÅÆ„Åü„ÇÅ„Ç§„É≥„Çπ„Éà„Éº„É´„Ç≥„Éû„É≥„Éâ„ÇíÊÆã„Åó„Å¶„Åä„Åè)
          dnf install -y amazon-ssm-agent
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent

          # Install Docker etc...
          dnf install -y docker awscli git bash-completion python3-pip unzip tmux zsh util-linux-user
          subscription-manager repos --enable codeready-builder-for-rhel-9-$(arch)-rpms
          dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
          dnf install -y neovim
          systemctl start docker
          systemctl enable docker
          pip install podman-compose

          #„ÅÇ„Å®„Åß„É≠„Éº„É´„Å´Âàá„ÇäÊõø„Åà„Çã‰∫àÂÆö (‚Äª Ê≥®: „Åì„ÅÆÈÉ®ÂàÜ„ÅØIAM„É≠„Éº„É´„Çí‰ΩøÁî®„Åó„Å¶„ÅÑ„Çã„Åü„ÇÅ‰∏çË¶Å„Å´„Å™„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô)
          mkdir -p /root/.aws
          echo "[default]" > /root/.aws/credentials
          echo "aws_access_key_id=${AccessKeyIdParam}" >> /root/.aws/credentials
          echo "aws_secret_access_key=${SecretAccessKeyParam}" >> /root/.aws/credentials
          chmod 600 /root/.aws/credentials
          echo "[default]" > /root/.aws/config
          echo "region=${RegionNameParam}" >> /root/.aws/config
          chmod 600 /root/.aws/config

          # ec2-user„Åß„ÇÇVSCode„ÅßÊé•Á∂ö„Åó„Å¶Cline„Çí‰Ωø„ÅÜ„Åü„ÇÅSSH„ÅÆË®≠ÂÆö
          cp -pR /root/.aws/ /home/ec2-user/.
          chown -R ec2-user:ec2-user /home/ec2-user/.aws/

          curl -L https://raw.githubusercontent.com/docker/cli/master/contrib/completion/bash/docker \
          -o /etc/bash_completion.d/docker
          echo ". /usr/share/bash-completion/bash_completion" >> /root/.bashrc
          echo ". /etc/bash_completion.d/docker" >> /root/.bashrc

          echo "export AWS_ACCESS_KEY_ID='${AccessKeyIdParam}'" >> /root/.bashrc
          echo "export AWS_SECRET_ACCESS_KEY='${SecretAccessKeyParam}'" >> /root/.bashrc
          echo "export AWS_DEFAULT_REGION='${RegionNameParam}'" >> /root/.bashrc
          echo "export AWS_ACCESS_KEY_ID='${AccessKeyIdParam}'" >> /home/ec2-user/.bashrc
          echo "export AWS_SECRET_ACCESS_KEY='${SecretAccessKeyParam}'" >> /home/ec2-user/.bashrc
          echo "export AWS_DEFAULT_REGION='${RegionNameParam}'" >> /home/ec2-user/.bashrc
          echo "export GITHUB_SHIFTREPO_PAT='${GithubShiftrepoPatParam}'" >> /home/ec2-user/.bashrc

          mkdir -p /root/.ssh
          echo "${GithubPrivateKey}" > /root/.ssh/id_ed25519
          chmod 400 /root/.ssh/id_ed25519

          cat <<EOF > /root/.ssh/config
          Host github.com
            IdentityFile ~/.ssh/id_ed25519
            User git
          Host github.com
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
          EOF

          cp -pR /root/.ssh/config /home/ec2-user/.ssh/.
          cp -pR /root/.ssh/id_ed25519 /home/ec2-user/.ssh/.
          chown -R ec2-user:ec2-user /home/ec2-user/.ssh/

          git clone git@github.com:shiftrepo/aws.git /root/aws.git
          git config --global --add safe.directory /root/aws.git

          git clone git@github.com:Akira-Papa/Claude-Code-Communication.git /root/Claude-Code-Communication.git

          podman-compose --file /root/aws.git/container/docker-compose.yml up --build -d

          #podman exec python-aws pip install -r /root/app/graphRAG/langfuse/requierment.txt

          # „Ç≥„É≥„ÉÜ„ÉäÂÜÖ„ÅÆ .bashrc „Å´Áí∞Â¢ÉÂ§âÊï∞„ÇíË®≠ÂÆö
          docker exec python-aws bash -c "echo 'export AWS_ACCESS_KEY_ID=${AccessKeyIdParam}' >> ~/.bashrc"
          docker exec python-aws bash -c "echo 'export AWS_SECRET_ACCESS_KEY=${SecretAccessKeyParam}' >> ~/.bashrc"
          docker exec python-aws bash -c "echo 'export AWS_DEFAULT_REGION=${RegionNameParam}' >> ~/.bashrc"
          
          git clone https://github.com/langfuse/langfuse.git /root/langfuse_latest.git

          rm -f /root/langfuse_latest.git/docker-compose.yml
          cp /root/aws.git/container/langfuse/docker-compose.yml /root/langfuse_latest.git/
          cp /root/aws.git/container/langfuse/.env /root/langfuse_latest.git/
          #podman-compose --file /root/langfuse_latest.git/docker-compose.yml up -d

          chown -R ec2-user:ec2-user /root/aws.git/ /root/langfuse_latest.git/ /root/Claude-Code-Communication.git
          chmod 777 /root

          # zsh„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´„Å®Ë®≠ÂÆö
          chsh -s $(which zsh)
          chsh -s $(which zsh) ec2-user
          git clone https://github.com/olivierverdier/zsh-git-prompt.git ~/.zsh-git-prompt
          git clone https://github.com/olivierverdier/zsh-git-prompt.git /home/ec2-user/.zsh-git-prompt
          cp -p /root/aws.git/zshenv/zshrc.org /home/ec2-user/.zshrc
          cp -p /root/aws.git/zshenv/zshrc.org /root/.zshrc

          echo ". /usr/share/bash-completion/bash_completion" >> /home/ec2-user/.zshrc
          echo ". /etc/bash_completion.d/docker" >> /home/ec2-user/.zshrc
          echo "export AWS_ACCESS_KEY_ID='${AccessKeyIdParam}'" >> /home/ec2-user/.zshrc
          echo "export AWS_SECRET_ACCESS_KEY='${SecretAccessKeyParam}'" >> /home/ec2-user/.zshrc
          echo "export AWS_DEFAULT_REGION='${RegionNameParam}'" >> /home/ec2-user/.zshrc
          echo "export GITHUB_SHIFTREPO_PAT='${GithubShiftrepoPatParam}'" >> /home/ec2-user/.zshrc

          # BigQueryAPIÁî®„ÅÆ„Ç≠„Éº„Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
          #aws s3 cp s3://ndi-3supervision/MIT/GCPServiceKey/tosapi-bd19ecc6f5bb.json tosapi-bd19ecc6f5bb.json

Outputs:
  VPCId:
    Description: Created VPC ID
    Value: !Ref VPCSHIFTgraphRAG
  PublicSubnetId:
    Description: Created Public Subnet ID
    Value: !Ref PublicSubnetSHIFTgraphRAG
  PrivateSubnetId:
    Description: Created Private Subnet ID
    Value: !Ref PrivateSubnetSHIFTgraphRAG

  PublicIP:
    Description: Public IP of the Original EC2 Instance
    Value: !If
      - CreateOriginalInstance
      - !GetAtt EC2InstanceSHIFTgraphRAG.PublicIp
      - "N/A"

  EC2InstanceId:
    Description: Launched Original EC2 Instance ID
    Value: !If
      - CreateOriginalInstance
      - !Ref EC2InstanceSHIFTgraphRAG
      - "N/A"

  # ----- Start of new Outputs for SHIFTDify -----
  SHIFTDifyInstanceId:
    Description: Launched SHIFTDify EC2 Instance ID
    Value: !If
      - CreateSHIFTDifyInstance
      - !Ref SHIFTDifyInstance
      - "N/A"

  SHIFTDifyInstancePublicIP:
    Description: Public IP of the SHIFTDify EC2 Instance
    Value: !If
      - CreateSHIFTDifyInstance
      - !GetAtt SHIFTDifyInstance.PublicIp
      - "N/A"

  SHIFTDifySecurityGroupId:
    Description: ID of the SHIFTDify Security Group
    Value: !If
      - CreateSHIFTDifyInstance
      - !Ref SHIFTDifySecurityGroup
      - "N/A"
  # ----- End of new Outputs for SHIFTDify -----

  # ----- Start of new Outputs for SHIFTGemma -----
  SHIFTGemmaInstanceId:
    Description: Launched SHIFTGemma EC2 Instance ID
    Value: !If
      - CreateSHIFTGemmaInstance
      - !Ref SHIFTGemmaInstance
      - "N/A"

  SHIFTGemmaInstancePublicIP:
    Description: Public IP of the SHIFTGemma EC2 Instance
    Value: !If
      - CreateSHIFTGemmaInstance
      - !GetAtt SHIFTGemmaInstance.PublicIp
      - "N/A"

  SHIFTGemmaSecurityGroupId:
    Description: ID of the SHIFTGemma Security Group
    Value: !If
      - CreateSHIFTGemmaInstance
      - !Ref SHIFTGemmaSecurityGroup
      - "N/A"
  # ----- End of new Outputs for SHIFTGemma -----
  SubdomainURL:
    Description: Access URL for n8n
    Value: !Sub "https://n8n.${HostedZoneName}"

  # ----- End of new Outputs for SHIFTGemma -----
  SubdomaindifyURL:
    Description: Access URL for dify
    Value: !Sub "https://dify.${HostedZoneName}"

  # ----- End of new Outputs for SHIFTGemma -----
  SubdomainMCPURL:
    Description: Access URL for MCP
    Value: !Sub "https://mcp.${HostedZoneName}"

